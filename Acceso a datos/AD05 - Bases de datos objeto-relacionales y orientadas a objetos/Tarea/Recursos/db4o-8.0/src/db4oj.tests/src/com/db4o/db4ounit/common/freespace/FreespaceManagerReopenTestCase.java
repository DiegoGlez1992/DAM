/* This file is part of the db4o object database http://www.db4o.com

Copyright (C) 2004 - 2011  Versant Corporation http://www.versant.com

db4o is free software; you can redistribute it and/or modify it under
the terms of version 3 of the GNU General Public License as published
by the Free Software Foundation.

db4o is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see http://www.gnu.org/licenses/. */
package com.db4o.db4ounit.common.freespace;

import com.db4o.config.*;
import com.db4o.internal.*;
import com.db4o.internal.slots.*;

import db4ounit.*;
import db4ounit.extensions.*;
import db4ounit.extensions.fixtures.*;


public class FreespaceManagerReopenTestCase extends AbstractDb4oTestCase implements OptOutMultiSession, OptOutDefragSolo, OptOutNonStandardBlockSize {
	
	private static int SIZE = 199331;

	public static void main(String[] args) {
		new FreespaceManagerReopenTestCase().runSolo();
	}
	
	protected void configure(Configuration config) throws Exception {
		super.configure(config);
		config.bTreeNodeSize(4);
	}
	
	public void test() throws Exception{
		Slot testSlot = localContainer().allocateSlot(SIZE);
		Slot reserveSlot = localContainer().allocateSlot(SIZE / 2);
		
		reopen();
		localContainer().free(testSlot);
		localContainer().free(reserveSlot);
		
		reopen();
		Slot slot1 = localContainer().allocateSlot(SIZE);
		Assert.isTrue(overlap(testSlot, slot1));
		reopen();
		Slot slot2 = localContainer().allocateSlot(SIZE);
		Assert.isFalse(overlap(testSlot, slot2));
	}
	
	private boolean overlap(Slot slot, Slot other){
		Slot first = slot.address() < other.address() ? slot : other;
		Slot second =  slot.address() > other.address() ? slot : other;
		return first.address() + first.length() >= second.address();
	}
	
	private LocalObjectContainer localContainer(){
		return ((LocalObjectContainer)db());
	}

}
