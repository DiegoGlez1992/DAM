<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basics Operations &amp; Concepts|Querying|SODA Query" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>SODA Performance Characteristics</title>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#basics/querying/soda/soda_performance_characteristics.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../basics.htm">Basics Operations &amp; Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../soda_query.htm">SODA Query</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Good Performance</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor17"></a>SODA Performance Characteristics</h1>
        <p>This overview shows which query operations perform well or badly on large datasets. It should give you an idea which operations can be used on large datasets and which operations can only be applied for small datasets.</p>
        <h2><a name="GoodPerf"></a>Good Performance Characteristics</h2>
        <p>For a good query performance fields which are used in a query have to be <a href="../../indexing.htm">indexed</a>. Otherwise db4o needs to scan through all objects. With an index these operations should scale logarithmically with the amount of data. The following queries all assume that the fields are indexed.</p>
        <h3>Equals Operation on Indexed Field</h3>
        <p>Simple equals operations on indexed fields’ perform very well.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria);</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Equals on indexed field
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Not equals operations also do perform well. However a 'not equals' operation tends to return a large result which will slow down the query.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria).not();</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Not equals on indexed field
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3><a name="FastNavigationQueries"></a>Navigation Queries on Index Fields</h3>
        <p>Queries which navigate along references are executed also efficiently, as long every field and reference is indexed.</p>
        <p>However there's a catch to this: The reference field type has to be a concrete type. If a field type is <span MadCap:conditions="Primary.Java">a generic type, </span>an interface or an object-type, <a href="#SlowNavigationQueries">then the query runs slow</a>.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Note that the type of the 'indexedReference' has to the specific type</span>
<span style="color:Green;">// which holds the 'indexedString'</span>
<span style="color:Blue;">final</span> Query query = container.query();
query.constrain(ItemHolder.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedReference"</span>).descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria);</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Equals across indexed fields
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Reference-Queries</h3>
        <p>Like regular equals operation, comparisons against references also have a good performance.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Item item = loadItemFromDatabase();

<span style="color:Blue;">final</span> Query query = container.query();
query.constrain(ItemHolder.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedReference"</span>)
        .constrain(item);</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Query by reference
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Comparison and Range Queries</h3>
        <p>Comparison and range queries  also perform well.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexNumber"</span>)
        .constrain(criteria).greater();</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Bigger than
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexNumber"</span>)
        .constrain(biggerThanThis).greater().and(
        query.descend(<span style="color:#A31515;">"indexNumber"</span>).constrain(smallerThanThis).smaller());</pre>
            <div class="codesnippet-meta">GoodPerformance.java: In between
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3><a name="Date"></a>Date Queries</h3>
        <p>Comparisons on dates also run fast:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexDate"</span>)
        .constrain(date);</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Date comparisons are also fast
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexDate"</span>)
        .constrain(date).greater();</pre>
            <div class="codesnippet-meta">GoodPerformance.java: Find a newer date
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="BadPerf"></a>Bad Performance Characteristics</h2>
        <p>Here's an overview of the query operations with bad performances characteristics. The reason is that db4o cannot utilize indexes to perform these queries.That means the  query time grows linearly with the amount of data.</p>
        <p>Since SODA is the low level query API all other query API will also perform badly for these operations.</p>
        <h3><a name="SlowNavigationQueries"></a>Navigation across <span MadCap:conditions="Primary.Java">Generic/</span>Object/Interface Fields</h3>
        <p>When your query navigates across a field which type is <span MadCap:conditions="Primary.Java">a generic parameter, </span>an object or interface then the performance is bad. The reason is that the query engine cannot be sure which objects potentially can be referenced by that field and therefore cannot use the index.</p>
        <p>This is not true when the <a href="#FastNavigationQueries">field has a concrete type</a>.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// The type of the 'indexedReference' is the generic parameter 'T'.</span>
<span style="color:Green;">// Due to type type erasure that type is unknown to db4o</span>
<span style="color:Blue;">final</span> Query query = container.query();
query.constrain(GenericItemHolder.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedReference"</span>).descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria);</pre>
            <div class="codesnippet-meta">BadPerformance.java: Navigation across non concrete typed fields
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>String Operations: Like, Contains, StartsWith, Ends With</h3>
        <p>All string operations beside the simple equals operation cannot use indexes at the moment. Therefore all string operations like contains, like, starts with etc. run slowly.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria).contains();</pre>
            <div class="codesnippet-meta">BadPerformance.java: Contains is slow
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>)
        .constrain(criteria).like();</pre>
            <div class="codesnippet-meta">BadPerformance.java: Like is slow
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3><a name="CollectionContains"></a>Queries on Collections / Arrays</h3>
        <p>Any query which does contains operations on collections/arrays or navigates across a collection/array field will run slowly. The reason is that db4o cannot index collections.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(CollectionHolder.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"items"</span>)
        .constrain(itemToQueryFor);</pre>
            <div class="codesnippet-meta">BadPerformance.java: Contains on collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(CollectionHolder.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"items"</span>)
        .descend(<span style="color:#A31515;">"indexedString"</span>).constrain(criteria);</pre>
            <div class="codesnippet-meta">BadPerformance.java: Navigate into collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Sorting</h3>
        <p>db4o does not use indexes for sorting operations. Therefore sorting is not a fast operation. However in most cases a query result is small enough so that the sorting time doesn't consume too much time.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>).orderAscending();</pre>
            <div class="codesnippet-meta">BadPerformance.java: Sorting a huge result set
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Evaluations</h3>
        <p>Evaluations cannot use indexes and will run slowly. </p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> Query query = container.query();
query.constrain(Item.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"indexedString"</span>).constrain(<span style="color:Blue;">new</span> Evaluation() {
    @Override
    <span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> evaluate(Candidate candidate) {
        <span style="color:Blue;">if</span> (candidate.getObject() <span style="color:Blue;">instanceof</span> String) {
            String value = (String) candidate.getObject();
            <span style="color:Blue;">if</span> (value.matches(<span style="color:#A31515;">"abc"</span>)) {
                candidate.include(<span style="color:Blue;">true</span>);
            }
        }
    }
});</pre>
            <div class="codesnippet-meta">BadPerformance.java: Evaluations
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="DetectSlowQueries"></a>Detect Slow Queries</h2>
        <p>The best indication that a query is slow is when it cannot use any field index. Install a <a href="../../../advanced_topics/diagnostics.htm">diagnostic listener and look for the LoadedFromClassIndex</a> message. That message indicates that a query couldn't use any field index for its execution. </p>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>