<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>db4o Reflection API</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#advanced_topics/db4o_reflection_api.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">db4o Reflection API</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>db4o <a name="kanchor67"></a>Reflection API</h1>
        <P>Reflection gives your code access to internal information for classes loaded into the <span class="PrimaryJVM">JVM</span>. It allows you to explore the structure of objects at runtime. In the case of reflection metadata is the description of classes and objects within the <span class="PrimaryJVM">JVM</span>, including their fields, methods and constructors. It allows the programmer to select target classes at runtime, create new objects, call their methods and operate with the fields.</P>
        <P>In order to persist object db4o uses the reflection to read object and store their values. You can exchange this reflector layer in the <a href="../configuration/common/reflector.htm">configuration</a>. </P>
        <P MadCap:conditions="Primary.Java">By default the JdkReflector is used. This reflector also allows you to specify the right class-loader.</P>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().reflectWith(
        <span style="color:Blue;">new</span> JdkReflector(Thread.currentThread().getContextClassLoader()));</pre>
            <div class="codesnippet-meta">CommonConfigurationExamples.java: Change the reflector
			<div class="codedownload"><a href="../CodeExamples/configuration/common/Example-configuration-common-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p MadCap:conditions="Primary.Java"> It's also possible to use very special class resolving strategy by implementing the JdkLoader-interface. For example when you want to look up classes in multiple class loaders.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();

JdkLoader classLookUp = <span style="color:Blue;">new</span> ClassLoaderLookup(
        Thread.currentThread().getContextClassLoader(),
        <span style="color:Blue;">new</span> URLClassLoader(<span style="color:Blue;">new</span> URL[]{<span style="color:Blue;">new</span> URL(<span style="color:#A31515;">"file://./some/other/location"</span>)}));
configuration.common().reflectWith(<span style="color:Blue;">new</span> JdkReflector(classLookUp));

ObjectContainer container = Db4oEmbedded.openFile(<span style="color:#A31515;">"database.db4o"</span>);</pre>
            <div class="codesnippet-meta">CommonConfigurationExamples.java: Complex class loader scenario
			<div class="codedownload"><a href="../CodeExamples/configuration/common/Example-configuration-common-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">class</span> ClassLoaderLookup <span style="color:Blue;">implements</span> JdkLoader {
    <span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">final</span> List&lt;ClassLoader&gt; classLoaders;


    ClassLoaderLookup(ClassLoader...classLoaders) {
        <span style="color:Blue;">this</span>.classLoaders = Arrays.asList(classLoaders);
    }

    ClassLoaderLookup(Collection&lt;ClassLoader&gt; classLoaders) {
        <span style="color:Blue;">this</span>.classLoaders = <span style="color:Blue;">new</span> ArrayList&lt;ClassLoader&gt;(classLoaders);
    }

    @Override
    <span style="color:Blue;">public</span> Class loadClass(String className) {
        <span style="color:Blue;">for</span> (ClassLoader loader : classLoaders) {
            Class&lt;?&gt; theClass = <span style="color:Blue;">null</span>;
            <span style="color:Blue;">try</span> {
                theClass = loader.loadClass(className);
                <span style="color:Blue;">return</span> theClass;
            } <span style="color:Blue;">catch</span> (ClassNotFoundException e) {
                <span style="color:Green;">// first check the other loaders</span>
            }
        }
        <span style="color:Blue;">throw</span>  <![CDATA[ ]]><span style="color:Blue;">new</span> RuntimeException(<span style="color:Blue;">new</span> ClassNotFoundException(className));
    }

    @Override
    <span style="color:Blue;">public</span> Object deepClone(Object o) {
        <span style="color:Blue;">return</span>  <![CDATA[ ]]><span style="color:Blue;">new</span> ClassLoaderLookup(classLoaders);
    }
}</pre>
            <div class="codesnippet-meta">ClassLoaderLookup.java: Complex class loader scenario
			<div class="codedownload"><a href="../CodeExamples/configuration/common/Example-configuration-common-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>If you need some special treatment you can create you're own reflector implementation. <a href="db4o_reflection_api/creating_your_own_reflector.htm" target="" title="" alt="" class="MCXref" xrefformat="See &quot;{paratext}&quot;">See "Creating your own reflector"</a></p>
        <p>db4o has also a generic reflector which can deal with stored objects without using the original class. <a href="db4o_reflection_api/genericreflector.htm" target="" title="" alt="" class="MCXref" xrefformat="See &quot;{paratext}&quot;">See "GenericReflector"</a></p>
        <script src="../Resources/Code/jquery.min.js">
        </script>
        <script src="../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>