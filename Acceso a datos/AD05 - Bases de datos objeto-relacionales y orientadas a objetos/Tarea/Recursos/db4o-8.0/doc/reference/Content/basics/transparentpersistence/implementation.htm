<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basics Operations &amp; Concepts|Transparent Activation/Persistence" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Implementation</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#basics/transparentpersistence/implementation.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../basics.htm">Basics Operations &amp; Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../transparent_persistence.htm">Transparent Activation/Persistence</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Adding the Configuration</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>Implementation</h1>
        <p>This topic explains how transparent activation/persistence works and how you can implement the required interfaces manually. In practice you should use the <a href="../../advanced_topics/enhancement_tools.htm">provided enhancer's</a> instead of implementing the interfaces yourself. <a href="ta_enhanced_example.htm" target="" title="" alt="" class="MCXref">See "Transparent Persistence Enhancement Example"</a></p>
        <h2><a name="Adding"></a>Adding the Configuration</h2>
        <p>We need to explicitly configure transparent activation/persistence. </p>
        <h3>Transparent Activation</h3>
        <p>This adds transparent activation, which automatically activates objects.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().add(<span style="color:Blue;">new</span> TransparentActivationSupport());
ObjectContainer container = Db4oEmbedded.openFile(configuration, DATABASE_FILE_NAME);</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Add transparent activation
			<div class="codedownload"><a href="../../CodeExamples/tp/enhancement/Example-tp-enhancement-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Transparent Persistence</h3>
        <p>This adds transparent persistence, which automatically activates objects and manages changes on objects. This includes implicitly the transparent activation support. </p>
        <p>Optionally you can specify how <a href="automatic_deactivation.htm">rollbacks</a> are handled.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().add(<span style="color:Blue;">new</span> TransparentPersistenceSupport(<span style="color:Blue;">new</span> DeactivatingRollbackStrategy()));
ObjectContainer container = Db4oEmbedded.openFile(configuration, DATABASE_FILE_NAME);</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Add transparent persistence
			<div class="codedownload"><a href="../../CodeExamples/tp/enhancement/Example-tp-enhancement-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Implemen"></a>Implementing the Activatable Interface</h2>
        <p>In order to support Transparent Activation, the objects which are stored in the database need to implement the <span class="PrimaryActivatable">Activatable</span>-interface.</p>
        <p>An object which implements the <span class="PrimaryActivatable">Activatable</span>-interface is responsible for activating itself. For this purpose the class needs a field to keep its activator. This field is only used by the <a href="../transparent_persistence.htm">transparent activation/persistence</a>. Therefore it's marked as transient, to avoid that it is stored in the database.&#160;</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">import</span> com.db4o.activation.ActivationPurpose;
<span style="color:Blue;">import</span> com.db4o.activation.Activator;
<span style="color:Blue;">import</span> com.db4o.ta.Activatable;

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">class</span> Person <span style="color:Blue;">implements</span> Activatable{

    <span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">transient</span> Activator activator;</pre>
            <div class="codesnippet-meta">Person.java: Implement the required activatable interface and add activator
			<div class="codedownload"><a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>The implementation of the two methods of the <span class="PrimaryActivatable">Activatable</span>-interface is straight forward. The bind-method binds an activator to the object. It's called by the transparent activation framework. The activate-method needs to be called before any read or write operation on the object. Since these two methods are always the same, you can move the implementation to a common super class or to a static utility class.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> bind(Activator activator) {
    <span style="color:Blue;">if</span> (<span style="color:Blue;">this</span>.activator == activator) {
        <span style="color:Blue;">return</span>;
    }
    <span style="color:Blue;">if</span> (activator != <span style="color:Blue;">null</span> &amp;&amp; <span style="color:Blue;">null</span> != <span style="color:Blue;">this</span>.activator) {
        <span style="color:Blue;">throw</span>  <![CDATA[ ]]><span style="color:Blue;">new</span> IllegalStateException(<span style="color:#A31515;">"Object can only be bound to one activator"</span>);
    }
    <span style="color:Blue;">this</span>.activator = activator;
}

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> activate(ActivationPurpose activationPurpose) {
    <span style="color:Blue;">if</span>(<span style="color:Blue;">null</span>!=activator){
        activator.activate(activationPurpose);
    }
}</pre>
            <div class="codesnippet-meta">Person.java: Implement the activatable interface methods
			<div class="codedownload"><a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Now to the most important part. Every time a field of the class is accessed you need to call the activate-method with the purpose. This needs to be done in every <span class="Primarygetter/setter">getter/setter</span> <![CDATA[ ]]>and method. Probably the best way is to use only                <![CDATA[ ]]><span class="Primarygetter/setter">getter/setter</span> <![CDATA[ ]]>even within the class to access fields. And the <span class="Primarygetter/setter">getter/setter</span> ensures that the activate-method is called.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> setName(String name) {
    activate(ActivationPurpose.WRITE);
    <span style="color:Blue;">this</span>.name = name;
}

<span style="color:Blue;">public</span> String getName()  {
    activate(ActivationPurpose.READ);
    <span style="color:Blue;">return</span> name;
}

<span style="color:Blue;">public</span> String toString()  {
    <span style="color:Green;">// use the getter/setter withing the class,</span>
    <span style="color:Green;">// to ensure the activate-method is called</span>
    <span style="color:Blue;">return</span> getName();
}</pre>
            <div class="codesnippet-meta">Person.java: Call the activate method on every field access
			<div class="codedownload"><a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p> Implementing the <span class="PrimaryActivatable">Activatable</span>-interface manually for every class is repetitive and error prone. That's why this process can be automated.<a href="ta_enhanced_example.htm" target="" title="" alt="" class="MCXref">See "Transparent Persistence Enhancement Example"</a></p>
        <p>After transparent activation/persistence is enabled you can navigate into object-graph as deeply as you want. The transparent activation will load the objects from the database as you need them. When you've enabled transparent persistence updates are also done transparently.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">{
    ObjectContainer container = openDatabaseWithTA();
    Person person = Person.personWithHistory();
    container.store(person);
    container.close();
}
{
    ObjectContainer container = openDatabaseWithTA();
    Person person = queryByName(container,<span style="color:#A31515;">"Joanna the 10"</span>);
    Person beginOfDynasty = person.getMother();

    <span style="color:Green;">// With transparent activation enabled, you can navigate deeply</span>
    <span style="color:Green;">// nested object graphs. db4o will ensure that the objects</span>
    <span style="color:Green;">// are loaded from the database.</span>
    <span style="color:Blue;">while</span>(<span style="color:Blue;">null</span>!=beginOfDynasty.getMother()){
        beginOfDynasty = beginOfDynasty.getMother();
    }
    System.out.println(beginOfDynasty.getName());
    
    container.close();
}</pre>
            <div class="codesnippet-meta">TransparentActivationExamples.java: Transparent activation in action
			<div class="codedownload"><a href="../../CodeExamples/ta/example/Example-ta-example-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Behavior"></a>Behavior in Mixed Mode</h2>
        <p>In some environments there are both, objects which implement the <span class="PrimaryActivatable">Activatable</span>-interface on other which don't. What's the behavior in this scenario? Then the behavior is this:</p>
        <ul>
            <li value="1">Objects which implement the <span class="PrimaryActivatable">Activatable</span>-interface are activated when they are used the first time. </li>
            <li value="2">Objects which do not implement the <span class="PrimaryActivatable">Activatable</span>-interface are always fully loaded.</li>
        </ul>
        <p>That behavior ensures that you never run into not activated objects in the transparent activation / persistence mode. </p>
        <p>However objects which do not implement the <span class="PrimaryActivatable">Activatable</span>-interface are not updated with transparent persistence. You have to do that yourself or enhance those classes as well.</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>