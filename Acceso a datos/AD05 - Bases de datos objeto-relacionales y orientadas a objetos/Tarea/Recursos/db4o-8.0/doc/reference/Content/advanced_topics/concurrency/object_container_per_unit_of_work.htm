<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|Concurrency and db4o" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Object Container per Unit of Work</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/concurrency/object_container_per_unit_of_work.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../concurrency.htm">Concurrency and db4o</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Object Container per Unit of Work</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>Object Container per Unit of Work</h1>
        <p>One possibility is to use an object container per unit of work and avoid sharing it across threads. A typical example is to use an object container per request. You can create a new <a href="../session_containers.htm">session object container at any time</a>. </p>
        <p>Let's take a look at an example. This operation  starts a background task and carries on doing other things:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Schedule back-ground tasks</span>
<span style="color:Blue;">final</span> Future&lt;?&gt; task = executor.submit(<span style="color:Blue;">new</span> Runnable() {
    @Override
    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> run() {
        updateSomePeople(container);
    }
});
<span style="color:Green;">// While doing other work</span>
listAllPeople(container);</pre>
            <div class="codesnippet-meta">UnitsOfWork.java: Schedule back-ground tasks
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>In this example we use an object container for the background work:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> updateSomePeople(ObjectContainer rootContainer) {
    ObjectContainer container = rootContainer.ext().openSession();
    <span style="color:Blue;">try</span> {
        <span style="color:Blue;">final</span> ObjectSet&lt;Person&gt; people = container.query(<span style="color:Blue;">new</span> Predicate&lt;Person&gt;() {
            @Override
            <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">boolean</span> match(Person person) {
                <span style="color:Blue;">return</span> person.getName().equals(<span style="color:#A31515;">"Joe"</span>);
            }
        });
        <span style="color:Blue;">for</span> (Person joe : people) {
            joe.setName(<span style="color:#A31515;">"New Joe"</span>);
            container.store(joe);
        }
    } <span style="color:Blue;">finally</span> {
        container.close();
    }
}</pre>
            <div class="codesnippet-meta">UnitsOfWork.java: An object container for the background task
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>And another background container for the list task.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> listAllPeople(ObjectContainer rootContainer) {
    ObjectContainer container = rootContainer.ext().openSession();
    <span style="color:Blue;">try</span> {
        <span style="color:Blue;">for</span> (Person person : container.query(Person.<span style="color:Blue;">class</span>)) {
            System.out.println(person.getName());
        }
    } <span style="color:Blue;">finally</span> {
        container.close();
    }
}</pre>
            <div class="codesnippet-meta">UnitsOfWork.java: An object container for this unit of work
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Be Aware of the Isolation Level</h2>
        <p>When using multiple object containers you need to be aware of the <a href="../../basics/acid_and_transactions/isolation.htm">transaction isolation</a>. db4o has read committed isolation properties. This isolation applies per object level. Object are loaded individually, which means that the different object-states may are from different committed states. </p>
        <p>Here's an example to demonstrate the isolation level issues. We have two bank accounts. One transaction lists the two bank accounts and sums up the total. </p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">long</span> moneyInOurAccounts = 0;
List&lt;BankAccount&gt; bankAccounts = container.query(BankAccount.<span style="color:Blue;">class</span>);
<span style="color:Blue;">for</span> (BankAccount account : bankAccounts) {
    System.out.println(<span style="color:#A31515;">"This account has "</span>+account.money());
    moneyInOurAccounts +=account.money();
    moveMoneyTransactionFinishes();
}
<span style="color:Green;">// We get the wrong answer here</span>
System.out.println(<span style="color:#A31515;">"The money total is "</span>+moneyInOurAccounts
        +<span style="color:#A31515;">". Expected is "</span>+INITIAL_MONEY_ON_ONE_ACCOUNT*bankAccounts.size());</pre>
            <div class="codesnippet-meta">InconsistentStateRead.java: We list the bank accounts and sum up the money
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-db4odoc-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>During that operation another transaction finishes a money transfer from one account to another and commits.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">List&lt;BankAccount&gt; bankAccounts = container.query(BankAccount.<span style="color:Blue;">class</span>);
<span style="color:Blue;">final</span> BankAccount debitAccount = bankAccounts.get(0);
<span style="color:Blue;">final</span> BankAccount creditAccount = bankAccounts.get(1);

<span style="color:Blue;">int</span> moneyToTransfer = 200;
creditAccount.withdraw(moneyToTransfer);
debitAccount.deposit(moneyToTransfer);

container.store(debitAccount);
container.store(creditAccount);
container.commit();</pre>
            <div class="codesnippet-meta">InconsistentStateRead.java: Meanwhile we transfer money.
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-db4odoc-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p> Now the other transaction sees one bank account previous transfer, the other account is in the last committed state. Therefore it sees an inconsistent view across these two objects. </p>
        <p>&#160;</p>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>