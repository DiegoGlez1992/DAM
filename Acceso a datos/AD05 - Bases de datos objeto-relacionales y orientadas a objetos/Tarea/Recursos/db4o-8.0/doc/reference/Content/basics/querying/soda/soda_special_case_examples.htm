<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basics Operations &amp; Concepts|Querying|SODA Query" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>SODA Special Cases Examples</title>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#basics/querying/soda/soda_special_case_examples.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../basics.htm">Basics Operations &amp; Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../soda_query.htm">SODA Query</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Contains on Collections and Arrays</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>SODA Special Cases Examples</h1>
        <p>This topic contains a examples which demonstrate special behavior for some types in SODA. Take also a look at the other <a href="soda_example_catelog.htm">SODA examples</a>.</p>
        <h2><a name="ContainsOnCollections"></a><a name="kanchor14"></a>Contains on Collections and Arrays</h2>
        <p>Collections and arrays have a special behavior in SODA to make them easier to query. For example you can simple use a constrain directly on a collection-field to check if it contains that value.</p>
        <p>Note that currently collections cannot be indexed and therefore such a constrain can be slow on a large data set.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(BlogPost.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"tags"</span>).constrain(<span style="color:#A31515;">"db4o"</span>);

ObjectSet&lt;Object&gt; result = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Collection contains constrain
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="ConstrainsOnCollectionMembers"></a>Constrains on Collection Members</h2>
        <p>When you have a collection or array field, you can simply descend further to the collection-member fields. This allows you query for a object, which has a collection and certain objects in that collection.</p>
        <p>Note that currently collections cannot be indexed and therefore such a constrain can be slow on a large data set.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(BlogPost.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"authors"</span>).descend(<span style="color:#A31515;">"name"</span>).constrain(<span style="color:#A31515;">"Jenny"</span>);

ObjectSet&lt;Object&gt; result = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Descend into collection members
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="ContainsKeyOnMaps"></a>Contains Key on <span class="PrimaryMap">Map</span>s</h2>
        <p>You can check a dictionary if it contains a certain key. Similar to collections, you just can directly use a constrain on the collection field. This will compare the value with the keys of the <span class="PrimaryMap">Map</span>.</p>
        <p>Note that currently collections cannot be indexed and therefore such a constrain can be slow on a large data set.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(BlogPost.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"metaData"</span>).constrain(<span style="color:#A31515;">"source"</span>);

ObjectSet&lt;Object&gt; result = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Map contains a key constrain
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="FieldObjects"></a>Return the Objects of a Field</h2>
        <p>With SODA you can navigate to a field and return the objects of that field. Note that this only works for reference objects and not for value objects like strings and numbers.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(Car.<span style="color:Blue;">class</span>);
query.descend(<span style="color:#A31515;">"name"</span>).constrain(<span style="color:#A31515;">"Mercedes"</span>);

<span style="color:Green;">// returns the pilot of these cars</span>
ObjectSet&lt;Object&gt; result = query.descend(<span style="color:#A31515;">"pilot"</span>).execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Return the object of a field
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="MixQueryByExample"></a>Mixing With Query By Example</h2>
        <p>When you have a reference type field, you can also use a <a href="../query_by_example.htm">query by example</a> constrain for that field. Pass a new object as an example  for this.</p>
        <p>Note that when you pass a persisted object, it will compare it by object identity and not use it as example. You can force this behavior by adding an explicit by example constrain.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(Car.<span style="color:Blue;">class</span>);
<span style="color:Green;">// if the given object is not stored,</span>
<span style="color:Green;">// it will behave like query by example for the given object</span>
<span style="color:Blue;">final</span> Pilot examplePilot = <span style="color:Blue;">new</span> Pilot(<span style="color:Blue;">null</span>, 42);
query.descend(<span style="color:#A31515;">"pilot"</span>).constrain(examplePilot);

ObjectSet&lt;Object&gt; carsOfPilot = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Mix with query by example
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="DynamicTypedNature"></a>Dynamically Typed</h2>
        <p>SODA is a dynamically query language. By default SODA acts like a filter on all stored objects. You just add constrains which filters the objects to the desired output. </p>
        <p>An example for this behavior: You just add an field-constraint without any <a href="soda_example_catelog.htm#TypeConstraint">type-constrain</a> on the object. This will return all objects which have such a field and match the constrain.</p>
        <p>Note that such queries do not utilize any index  and therefore show bad performance.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
<span style="color:Green;">// You can simple filter objects which have a certain field</span>
query.descend(<span style="color:#A31515;">"name"</span>).constrain(<span style="color:Blue;">null</span>).not();

ObjectSet&lt;Object&gt; result = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Pure field constrains
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>This also means that you can query for not existing fields. SODA will not complain if a field doesn't exist. Instead it won't return any object, because no object could satisfy the constrain.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Query query = container.query();
query.constrain(Pilot.<span style="color:Blue;">class</span>);
<span style="color:Green;">// using not existing fields doesn't throw an exception</span>
<span style="color:Green;">// but rather exclude all object which don't use this field</span>
query.descend(<span style="color:#A31515;">"notExisting"</span>).constrain(<span style="color:Blue;">null</span>).not();

ObjectSet&lt;Object&gt; result = query.execute();</pre>
            <div class="codesnippet-meta">SodaQueryExamples.java: Using not existing fields excludes objects
			<div class="codedownload"><a href="../../../CodeExamples/query/soda/Example-query-soda-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>