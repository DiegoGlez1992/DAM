<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|Type Handling" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Translators</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/type_handling/translators.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../type_handling.htm">Type Handling</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Translators</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor56"></a>Translators</h1>
        <p>Sometimes objects cannot be stored in db4o. For example because the objects have references to other parts of the system other where never intended to be stored. This is especially for objects from third party libraries. </p>
        <p>Now the db4o object translators is a simple mechanism which allows you to manually handle the persistence of an object. There are two important interfaces for this. The ObjectTranslator-interface and the ObjectConstructor. The first interface lets you take the control over storing and activation of the object. The second interface also allows you to control the instantiation of the object.</p>
        <p>If you register a ObjectTranslator-instance for a certain type, it will also be applied to sub-types. This doesn't apply to ObjectConstructor-instances, because those need to create the right instance and therefore cannot handle subtypes.</p>
        <h2>Creating a Translator</h2>
        <p>First you need to create a translator for your types. Let's take a look at this example. There three distinct tasks a translator has to do. The first task is to convert the not storable object into another, storable object. Another task of the translator is to take care of the activation of the object. There it need to copy the values from the stored object into a instance of the original type. The third task it to create instances of the object. There you create a instance of the original type. And for some types you maybe also read the data at this point in time. </p>
        <p>As an alternative you can use the <a href="translators/built-in_translators.htm">predefined translators</a>.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">class</span> ExampleTranslator <span style="color:Blue;">implements</span> ObjectConstructor {

    <span style="color:Green;">// This is called to store the object</span>
    <span style="color:Blue;">public</span> Object onStore(ObjectContainer objectContainer, Object objToStore) {
        NonStorableType notStorable = (NonStorableType) objToStore;
        <span style="color:Blue;">return</span> notStorable.getData();
    }

    <span style="color:Green;">// This is called when the object is activated</span>
    <span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> onActivate(ObjectContainer objectContainer, Object targetObject, Object storedObject) {
        NonStorableType notStorable = (NonStorableType) targetObject;
        notStorable.setData((String)storedObject);
    }

    <span style="color:Green;">// Tell db4o which type we use to store the data</span>
    <span style="color:Blue;">public</span> Class storedClass() {
        <span style="color:Blue;">return</span> String.<span style="color:Blue;">class</span>;
    }

    <span style="color:Green;">// This method is called when a new instance is needed</span>
    <span style="color:Blue;">public</span> Object onInstantiate(ObjectContainer objectContainer, Object storedObject) {
        <span style="color:Blue;">return</span>  <![CDATA[ ]]><span style="color:Blue;">new</span> NonStorableType(<span style="color:#A31515;">""</span>);
    }
}</pre>
            <div class="codesnippet-meta">ExampleTranslator.java: An example translator
			<div class="codedownload"><a href="../../CodeExamples/typehandling/translator/Example-typehandling-translator-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Registering a Translator</h2>
        <p>After that you can register the translator for you're type. If you register a ObjectTranslator-instance it will also be applied to the sub-types. However a ObjectConstructor-instance is only applied for the specific type. </p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().objectClass(NonStorableType.<span style="color:Blue;">class</span>).translate(<span style="color:Blue;">new</span> ExampleTranslator());
ObjectContainer container = Db4oEmbedded.openFile(configuration, <span style="color:#A31515;">"database.db4o"</span>);</pre>
            <div class="codesnippet-meta">TranslatorExample.java: Register type translator for the NonStorableType-class
			<div class="codedownload"><a href="../../CodeExamples/typehandling/translator/Example-typehandling-translator-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Using The Translator</h2>
        <p>After that you can store and use the not storable objects like any other persistent objects. db4o will call the translator for each instance when required in order to store the object correctly. </p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">container.store(<span style="color:Blue;">new</span> NonStorableType(<span style="color:#A31515;">"TestData"</span>));</pre>
            <div class="codesnippet-meta">TranslatorExample.java: Store the non storable type
			<div class="codedownload"><a href="../../CodeExamples/typehandling/translator/Example-typehandling-translator-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">NonStorableType instance = container.query(NonStorableType.<span style="color:Blue;">class</span>).get(0);</pre>
            <div class="codesnippet-meta">TranslatorExample.java: Load the non storable type
			<div class="codedownload"><a href="../../CodeExamples/typehandling/translator/Example-typehandling-translator-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Limitations</h2>
        <p>The object translator mechanism is great for types which couldn't be stored otherwise. However there are serious limitations.</p>
        <ul>
            <li value="1">Queries into the members of a object which was stored with a object translator are extremely slow. The reason is that the object first need to be loaded and instantiated with the translator in order to run the query on it. </li>
            <li value="2">You cannot index types which are translated.</li>
        </ul>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>